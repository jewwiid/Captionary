//
//  CaptionVariant.swift
//  Captionary
//
//  Created by Claude on 2025-10-06.
//  Represents generated caption variants with metadata
//

import Foundation

/// Represents a single caption variant generated by AI
struct CaptionVariant: Codable, Identifiable {
    let id = UUID()
    let caption: String
    let hashtags: [String]
    let altText: String
    let qualityScore: Double
    let tone: String
    let createdAt: Date
    
    enum CodingKeys: String, CodingKey {
        case caption, hashtags, altText, qualityScore, tone, createdAt
    }
    
    init(caption: String, hashtags: [String], altText: String, qualityScore: Double, tone: String) {
        self.caption = caption
        self.hashtags = hashtags
        self.altText = altText
        self.qualityScore = qualityScore
        self.tone = tone
        self.createdAt = Date()
    }
}

/// Response structure from AI caption generation API
struct CaptionGenerationResponse: Codable {
    let variants: [CaptionVariant]
    let requestId: String
    let processingTime: Double
    let aiProvider: String // "openai" or "gemini"
    
    enum CodingKeys: String, CodingKey {
        case variants, requestId, processingTime, aiProvider
    }
}

// MARK: - Convenience Extensions
extension CaptionVariant {
    /// Formatted hashtags as a single string
    var hashtagString: String {
        hashtags.map { "#\($0)" }.joined(separator: " ")
    }
    
    /// Quality score as percentage
    var qualityPercentage: Int {
        Int(qualityScore * 100)
    }
    
    /// Quality rating based on score
    var qualityRating: QualityRating {
        switch qualityScore {
        case 0.8...1.0:
            return .excellent
        case 0.6..<0.8:
            return .good
        case 0.4..<0.6:
            return .fair
        default:
            return .poor
        }
    }
}

enum QualityRating: String, CaseIterable {
    case excellent = "Excellent"
    case good = "Good"
    case fair = "Fair"
    case poor = "Poor"
    
    var color: String {
        switch self {
        case .excellent: return "green"
        case .good: return "blue"
        case .fair: return "orange"
        case .poor: return "red"
        }
    }
}
